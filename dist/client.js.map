{"version":3,"file":"client.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA","sources":["webpack://camunda-modeler-plugin-example/./client/bpmn-js-extension/ExampleBpmnJsExtension.js","webpack://camunda-modeler-plugin-example/./client/bpmn-js-extension/bpmnErrorHandler.js","webpack://camunda-modeler-plugin-example/./client/bpmn-js-extension/escalationHandler.js","webpack://camunda-modeler-plugin-example/./client/bpmn-js-extension/idHandler.js","webpack://camunda-modeler-plugin-example/./client/bpmn-js-extension/index.js","webpack://camunda-modeler-plugin-example/./client/bpmn-js-extension/javaGenerator.js","webpack://camunda-modeler-plugin-example/./client/bpmn-js-extension/messageHandler.js","webpack://camunda-modeler-plugin-example/./client/bpmn-js-extension/signalHandler.js","webpack://camunda-modeler-plugin-example/./client/bpmn-js-extension/taskHandler.js","webpack://camunda-modeler-plugin-example/./node_modules/camunda-modeler-plugin-helpers/index.js","webpack://camunda-modeler-plugin-example/webpack/bootstrap","webpack://camunda-modeler-plugin-example/webpack/runtime/define property getters","webpack://camunda-modeler-plugin-example/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-plugin-example/webpack/runtime/make namespace object","webpack://camunda-modeler-plugin-example/./client/index.js"],"sourcesContent":["import MessageHandler from \"./messageHandler.js\";\nimport SignalHandler from \"./signalHandler.js\";\nimport BpmnErrorHandler from \"./bpmnErrorHandler.js\";\nimport TaskHandler from \"./taskHandler.js\";\nimport EscalationHandler from \"./escalationHandler.js\";\nimport IdHandler from \"./idHandler.js\";\nimport JavaGenerator from \"./javaGenerator.js\";\n\nconst handlers = [\n  MessageHandler,\n  SignalHandler,\n  BpmnErrorHandler,\n  TaskHandler,\n  EscalationHandler,\n  IdHandler,\n];\n\nconst generators = {\n  java: JavaGenerator,\n};\n\nexport default function ExampleBpmnJsExtension(\n  elementRegistry,\n  editorActions,\n  canvas,\n  modeling\n) {\n  editorActions.register({\n    \"generateConstants:java\": function () {\n      generateConstants(\"java\");\n    },\n    \"generateConstants:python\": function () {\n      generateConstants(\"python\");\n    },\n  });\n\n  const generateConstants = (language) => {\n    const result = parse();\n    const generated = generators[language](result);\n  };\n\n  const parse = () => {\n    const result = {\n      messages: [],\n      signals: [],\n      bpmnErrorCodes: [],\n      bpmnEscalationCodes: [],\n      externalTaskTopics: [],\n      delegateExpressions: [],\n      javaClasses: [],\n      jobTypes: [],\n      elementIds: {},\n    };\n    var elements = elementRegistry._elements;\n    Object.keys(elements).forEach(function (key) {\n      var businessObject = elements[key].element.businessObject;\n      const context = {\n        element: businessObject,\n        result: result,\n      };\n      handlers.forEach((h) => h(context));\n    });\n    console.log(result);\n    return result;\n  };\n}\n\nExampleBpmnJsExtension.$inject = [\n  \"elementRegistry\",\n  \"editorActions\",\n  \"canvas\",\n  \"modeling\",\n];\n","export default function (context) {\n  if (\n    context.element.eventDefinitions &&\n    context.element.eventDefinitions[0] &&\n    context.element.eventDefinitions[0].errorRef\n  ) {\n    const bpmnErrorCode =\n      context.element.eventDefinitions[0].errorRef.errorCode;\n    console.log(`BPMN Error found: ${bpmnErrorCode}`);\n    if (!context.result.bpmnErrorCodes.includes(bpmnErrorCode)) {\n      context.result.bpmnErrorCodes.push(bpmnErrorCode);\n    }\n  }\n}\n","export default function (context) {\n  if (\n    context.element.eventDefinitions &&\n    context.element.eventDefinitions[0] &&\n    context.element.eventDefinitions[0].escalationRef\n  ) {\n    const bpmnEscalationCode =\n      context.element.eventDefinitions[0].escalationRef.escalationCode;\n    console.log(`BPMN Escalation found: ${bpmnEscalationCode}`);\n    if (!context.result.bpmnEscalationCodes.includes(bpmnEscalationCode)) {\n      context.result.bpmnEscalationCodes.push(bpmnEscalationCode);\n    }\n  }\n}\n","export default function (context) {\n  // find relevant data from process element\n  const type = context.element.$type.substring(\n    context.element.$type.indexOf(\":\") + 1\n  );\n  const name = context.element.name;\n  const id = context.element.id;\n  // check if type already exists\n  let names = context.result.elementIds[type];\n  if (!names) {\n    // if not, create it on results\n    context.result.elementIds[type] = {};\n    names = context.result.elementIds[type];\n  }\n  // create name to insert\n  let counter = 0;\n  let nameToInsert = name || id;\n  while (names[nameToInsert] && names[nameToInsert] !== id) {\n    nameToInsert = `${name}_${counter}`;\n    counter++;\n  }\n  // insert id to result\n  names[nameToInsert] = id;\n}\n","import ExampleBpmnJsExtension from \"./ExampleBpmnJsExtension\";\n\nexport default {\n  __init__: [\"GENERATE_CONSTANTS\"],\n  GENERATE_CONSTANTS: [\"type\", ExampleBpmnJsExtension],\n};\n","export default function (result) {}\n","export default function (context) {\n  let messageName = undefined;\n  if (context.element.messageRef) {\n    messageName = context.element.messageRef.name;\n  }\n  if (\n    context.element.eventDefinitions &&\n    context.element.eventDefinitions[0] &&\n    context.element.eventDefinitions[0].messageRef\n  ) {\n    messageName = context.element.eventDefinitions[0].messageRef.name;\n  }\n  if (messageName) {\n    console.log(`Message found: ${messageName}`);\n    if (!context.result.messages.includes(messageName)) {\n      context.result.messages.push(messageName);\n    }\n  }\n}\n","export default function (context) {\n  if (\n    context.element.eventDefinitions &&\n    context.element.eventDefinitions[0] &&\n    context.element.eventDefinitions[0].signalRef\n  ) {\n    const signalName = context.element.eventDefinitions[0].signalRef.name;\n    console.log(`Signal found: ${signalName}`);\n    if (!context.result.signals.includes(signalName)) {\n      context.result.signals.push(signalName);\n    }\n  }\n}\n","export default function (context) {\n  if (context.element.topic) {\n    const externalTaskTopic = context.element.topic;\n    console.log(`External Task Topic found: ${externalTaskTopic}`);\n    if (!context.result.externalTaskTopics.includes(externalTaskTopic)) {\n      context.result.externalTaskTopics.push(externalTaskTopic);\n    }\n  }\n\n  if (context.element.delegateExpression) {\n    const delegateExpression = context.element.delegateExpression;\n    console.log(`Delegate Expression found: ${delegateExpression}`);\n    if (!context.result.delegateExpressions.includes(delegateExpression)) {\n      context.result.delegateExpressions.push(delegateExpression);\n    }\n  }\n\n  if (context.element.class) {\n    const javaClass = context.element.class;\n    console.log(`Java Class found: ${javaClass}`);\n    if (!context.result.javaClasses.includes(javaClass)) {\n      context.result.javaClasses.push(javaClass);\n    }\n  }\n\n  if (\n    context.element.extensionElements &&\n    context.element.extensionElements.values &&\n    context.element.extensionElements.values[0] &&\n    context.element.extensionElements.values[0].type\n  ) {\n    const jobType = context.element.extensionElements.values[0].type;\n    console.log(`Job Type found: ${jobType}`);\n    if (!context.result.jobTypes.includes(jobType)) {\n      context.result.jobTypes.push(jobType);\n    }\n  }\n}\n","/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {Object} plugin\r\n * @param {String} type\r\n */\r\nexport function registerClientPlugin(plugin, type) {\r\n  var plugins = window.plugins || [];\r\n  window.plugins = plugins;\r\n\r\n  if (!plugin) {\r\n    throw new Error('plugin not specified');\r\n  }\r\n\r\n  if (!type) {\r\n    throw new Error('type not specified');\r\n  }\r\n\r\n  plugins.push({\r\n    plugin: plugin,\r\n    type: type\r\n  });\r\n}\r\n\r\n/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {import('react').ComponentType} extension\r\n *\r\n * @example\r\n *\r\n * import MyExtensionComponent from './MyExtensionComponent';\r\n *\r\n * registerClientExtension(MyExtensionComponent);\r\n */\r\nexport function registerClientExtension(component) {\r\n  registerClientPlugin(component, 'client');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerPlatformBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerPlatformBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerPlatformBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.platform.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerCloudBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerCloudBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerCloudBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.cloud.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerPlatformBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerPlatformBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerPlatformBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.platform.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerCloudBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerCloudBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerCloudBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.cloud.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerDmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerDmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerDmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'dmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerDmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const DmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\r\n * registerDmnJSPlugin(DmnJSModule, 'drd')\r\n */\r\nexport function registerDmnJSPlugin(module, components) {\r\n\r\n  if (!Array.isArray(components)) {\r\n    components = [ components ]\r\n  }\r\n\r\n  components.forEach(c => registerClientPlugin(module, `dmn.modeler.${c}.additionalModules`)); \r\n}\r\n\r\n/**\r\n * Return the modeler directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getModelerDirectory() {\r\n  return window.getModelerDirectory();\r\n}\r\n\r\n/**\r\n * Return the modeler plugin directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getPluginsDirectory() {\r\n  return window.getPluginsDirectory();\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/** \n * NOTE: This is specifically a registration of a **bpmn-js** extension. If you would like to create another type of plugin \n * (say a client extension), the structure of the plugin and the function to register it will be slightly different.\n * \n * Please refer to:\n * Examples plugins - https://github.com/camunda/camunda-modeler-plugins\n * Plugin documentation - https://docs.camunda.io/docs/components/modeler/desktop-modeler/plugins/\n */\n\nimport {\n  registerBpmnJSPlugin\n} from 'camunda-modeler-plugin-helpers';\n\nimport BpmnExtensionModule from './bpmn-js-extension';\n\nregisterBpmnJSPlugin(BpmnExtensionModule);\n"],"names":[],"sourceRoot":""}